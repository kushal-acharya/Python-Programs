# -*- coding: utf-8 -*-
"""

@author: User
"""
#------Global Variables-------
#Game board
board =["-","-","-",
        "-","-","-",
        "-","-","-",] # this is our board
#If game is still going
game_still_going = True

#Who won? Or tie?
winner= None
#Whose turn is it
current_player = "O"

def display_board(): # defining a function display board
    print(board[0]+" | " +board[1]+" | " +board[2])
    print(board[3]+" | " +board[4]+" | " +board[5])
    print(board[6]+" | " +board[7]+" | " +board[8])


def play_game(): #defining how to play games
    display_board() #must call inside, whenever players wants to play
    
    while game_still_going:
        handle_turn(current_player)
        #check if the game has ended
        check_if_game_over()
    #flip to the other player
        flip_player()
    #the game has ended
    if winner == 'X' or winner =='O':
        print(winner +" won.")
    elif winner== None:
        print("Game has tied")
    #handle_turn ()
    
def handle_turn(player):
    print( player + "'s turn.")
    position = input("Choose a position from 1 to 9: ")
    valid = False
    while not valid:
        while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
            position = input ("Invalid input. Choose a position from 1 to 9: ")
        position = int(position)-1 #as starts from 0 in our case
        if board[position] == "-":
            valid = True
        else:    
            print("You can't go there. Try next position")
    board[position]= player
    display_board()

def check_if_game_over():
    check_for_winner()
    check_if_tie()

def check_for_winner():
    global winner # to access global variable
    #check rows
    row_winner = check_rows()
    #check columns
    column_winner = check_columns()
    #check diagonals
    diagonal_winner = check_diagonals()
    if row_winner:
        winner= row_winner
    elif column_winner:
        winner = column_winner
        #there was a win
    elif diagonal_winner:
        winner = diagonal_winner
        #there was a winner
    else:
        winner = None
    return
def check_rows():
    # set up global variables
    global game_still_going
    #check if any of the rows have a match
    row_1 = board[0]== board[1]== board[2] !='-'
    row_2 = board[3]== board[4]== board[5] !='-'
    row_3 = board[6]== board[7]== board[8] !='-'
    # if anyone have a match, lag a win
    if row_1 or row_2 or row_3:
        game_still_going = False
    # Return the winner (X or O)
    if row_1:
        return board[0]
    elif row_2:
        return board[3]
    elif row_3:
        return board[6]
    return
def check_columns():
    global game_still_going
    #check if any of the rows have a match
    column_1 = board[0]== board[3]== board[6] !='-'
    column_2 = board[1]== board[4]== board[7] !='-'
    column_3 = board[2]== board[5]== board[8] !='-'
    # if anyone have a match, lag a win
    if column_1 or column_2 or column_3:
        game_still_going = False
    # Return the winner (X or O)
    if column_1:
        return board[0]
    elif column_2:
        return board[1]
    elif column_3:
        return board[2]
    return
def check_diagonals():
    global game_still_going
    #check if any of the rows have a match
    diagonal_1 = board[0]== board[4]== board[8] !='-'
    diagonal_2 = board[2]== board[4]== board[6] !='-'
    # if anyone have a match, lag a win
    if diagonal_1 or diagonal_2:
        game_still_going = False
    # Return the winner (X or O)
    if diagonal_1:
        return board[0]
    elif diagonal_2:
        return board[2]
    return

def check_if_tie():
    global game_still_going
    if "-" not in board:
        game_still_going = False
    return 

def flip_player():
    global current_player #global variable
    if current_player == 'X':
        current_player = "O"
    elif current_player =="O": 
        current_player ="X"
    return
play_game()

    
